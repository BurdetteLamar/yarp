  ##############################################################################
  # BEGIN TEMPLATE                                                             #
  ##############################################################################

  <%- types.each do |type| -%>
  class <%= type.name -%> < Node
    attr_reader <%= type.params.map { |param| ":#{param.name}" }.join(", ") %>, :location

    # def initialize: (<%= type.params.map { |param| "#{param.name}: #{param.rbs_class}" }.join(", ") %>, location: Location) -> void
    def initialize(<%= type.params.map(&:name).join(", ") %>, location)
      <%- type.params.each do |param| -%>
      @<%= param.name %> = <%= param.name %>
      <%- end -%>
      @location = location
    end

    def accept(visitor)
      visitor.visit_<%= type.human %>(self)
    end

    def child_nodes
      [<%= type.params.map(&:child_nodes).compact.join(", ") %>]
    end

    alias deconstruct child_nodes

    def deconstruct_keys(keys)
      { <%= type.params.map { |param| "#{param.name}: #{param.name}" }.join(", ") %>, location: location }
    end

    def ==(other)
      other in <%= type.name %>[<%= type.params.map { |param| "#{param.name}: ^(#{param.name})" }.join(", ") %>]
    end
  end

  <%- end -%>
  module DSL
    private

    <%- types.each do |type| -%>
    def <%= type.name %>(<%= type.params.map(&:name).join(", ") %>) = <%= type.name %>.new(<%= type.params.map(&:name).join(", ") %>, Location.null)
    <%- end -%>

    <%- tokens.each do |token| -%>
    def <%= token %>(value) = Token.new(<%= token.inspect %>, value, Location.null)
    <%- end -%>
  end

  ##############################################################################
  # END TEMPLATE                                                               #
  ##############################################################################
