#include "extension.h"

extern VALUE rb_cYARP;
extern VALUE rb_cYARPToken;
extern VALUE rb_cYARPLocation;

static VALUE
location_new(yp_parser_t *parser, const char *start, const char *end) {
  VALUE argv[] = { LONG2FIX(start - parser->start), LONG2FIX(end - parser->start) };
  return rb_class_new_instance(2, argv, rb_cYARPLocation);
}

static VALUE
token_type(yp_token_t *token) {
  if (token->type == YP_TOKEN_INVALID) {
    // We're going to special-case the invalid token here since that doesn't
    // actually exist in Ripper. This is going to give us a little more
    // information when our tests fail.
    // fprintf(stderr, "Invalid token: %.*s\n", (int) (token.end - token.start), token.start);
    return ID2SYM(rb_intern("INVALID"));
  }

  return ID2SYM(rb_intern(yp_token_type_to_str(token->type)));
}

static VALUE
yp_string_new(yp_string_t *string) {
  return rb_str_new(yp_string_source(string), yp_string_length(string));
}

VALUE
yp_token_new(yp_parser_t *parser, yp_token_t *token) {
  VALUE argv[] = {
    token_type(token),
    rb_str_new(token->start, token->end - token->start),
    location_new(parser, token->start, token->end)
  };

  return rb_class_new_instance(3, argv, rb_cYARPToken);
}

VALUE
yp_node_new(yp_parser_t *parser, yp_node_t *node) {
  switch (node->type) {
    <%- nodes.each do |node| -%>
    case <%= node.type %>: {
      VALUE argv[<%= node.params.length + 1 %>];
      <%- node.params.each_with_index do |param, index| -%>

      // <%= param.name %>
      <%- case param -%>
      <%- when NodeParam -%>
      argv[<%= index %>] = yp_node_new(parser, node->as.<%= node.human %>.<%= param.name %>);
      <%- when OptionalNodeParam -%>
      argv[<%= index %>] = node->as.<%= node.human %>.<%= param.name %> == NULL ? Qnil : yp_node_new(parser, node->as.<%= node.human %>.<%= param.name %>);
      <%- when NodeListParam -%>
      argv[<%= index %>] = rb_ary_new();
      for (size_t index = 0; index < node->as.<%= node.human %>.<%= param.name %>.size; index++) {
        rb_ary_push(argv[<%= index %>], yp_node_new(parser, node->as.<%= node.human %>.<%= param.name %>.nodes[index]));
      }
      <%- when StringParam -%>
      argv[<%= index %>] = yp_string_new(&node->as.<%= node.human %>.<%= param.name %>);
      <%- when TokenParam -%>
      argv[<%= index %>] = yp_token_new(parser, &node->as.<%= node.human %>.<%= param.name %>);
      <%- when OptionalTokenParam -%>
      argv[<%= index %>] = node->as.<%= node.human %>.<%= param.name %>.type == YP_TOKEN_NOT_PROVIDED ? Qnil : yp_token_new(parser, &node->as.<%= node.human %>.<%= param.name %>);
      <%- when TokenListParam -%>
      argv[<%= index %>] = rb_ary_new();
      for (size_t index = 0; index < node->as.<%= node.human %>.<%= param.name %>.size; index++) {
        rb_ary_push(argv[<%= index %>], yp_token_new(parser, &node->as.<%= node.human %>.<%= param.name %>.tokens[index]));
      }
      <%- when LocationParam -%>
      argv[<%= index %>] = location_new(parser, node->as.<%= node.human %>.<%= param.name %>.start, node->as.<%= node.human %>.<%= param.name %>.end);
      <%- when OptionalLocationParam -%>
      argv[<%= index %>] = node->as.<%= node.human %>.<%= param.name %>.start == parser->start ? Qnil : location_new(parser, node->as.<%= node.human %>.<%= param.name %>.start, node->as.<%= node.human %>.<%= param.name %>.end);
      <%- when IntegerParam -%>
      argv[<%= index %>] = INT2FIX(node->as.<%= node.human %>.<%= param.name %>);
      <%- else -%>
      <%- raise -%>
      <%- end -%>
      <%- end -%>

      // location
      argv[<%= node.params.length %>] = location_new(parser, node->location.start, node->location.end);

      return rb_class_new_instance(<%= node.params.length + 1 %>, argv, rb_const_get_at(rb_cYARP, rb_intern("<%= node.name %>")));
    }
    <%- end -%>
    default:
      rb_raise(rb_eRuntimeError, "unknown node type: %d", node->type);
  }
}
