/******************************************************************************/
/* BEGIN TEMPLATE                                                             */
/******************************************************************************/

<%- types.each do |type| -%>
// Allocate a new <%= type.name %> node.
static yp_node_t *
<%- params = type.params.map(&:param).compact.join(", ") -%>
yp_node_alloc_<%= type.human %>(yp_parser_t *parser<%= params.empty? ? "" : ", #{params}" %>) {
  yp_node_t *node = yp_node_alloc(parser);
  *node = (yp_node_t) {
    .type = <%= type.type %>,
    .location = <%= type.location.to_c %>,
    .as.<%= type.human %> = {
      <%- type.params.each do |param| -%>
      .<%= param.name %> = <%= param.assign %>,
      <%- end -%>
    }
  };
  return node;
}

<%- end -%>
// Deallocate the space for a yp_node_t. Similarly to yp_node_alloc, we're not
// using the parser argument, but it's there to allow for the future possibility
// of pre-allocating larger memory pools.
void
yp_node_dealloc(yp_parser_t *parser, yp_node_t *node) {
  switch (node->type) {
    <%- types.each do |type| -%>
    case <%= type.type %>:
      <%- type.params.each do |param| -%>
      <%- case param -%>
      <%- when NodeParam -%>
      yp_node_dealloc(parser, node->as.<%= type.human %>.<%= param.name %>);
      <%- when NodeListParam -%>
      yp_node_list_dealloc(parser, node->as.<%= type.human %>.<%= param.name %>);
      <%- end -%>
      <%- end -%>
      free(node);
      break;
    <%- end -%>
  }
}

/******************************************************************************/
/* END TEMPLATE                                                               */
/******************************************************************************/
