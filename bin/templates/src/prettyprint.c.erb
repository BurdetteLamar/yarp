/******************************************************************************/
/* This file is generated by the bin/template script and should not be        */
/* modified manually.                                                         */
/******************************************************************************/

#include "yarp.h"

static void
prettyprint_token(yp_buffer_t *buffer, yp_token_t *token) {
  yp_buffer_append_str(buffer, "\"", 1);
  yp_buffer_append_str(buffer, token->start, token->end - token->start); 
  yp_buffer_append_str(buffer, "\"", 1);
}

static void
prettyprint_node(yp_buffer_t *buffer, yp_parser_t *parser, yp_node_t *node) {
  switch (node->type) {
    <%- nodes.each do |node| -%>
    case <%= node.type %>: {
      yp_buffer_append_str(buffer, "<%= node.name %>(", <%= node.name.length + 1 %>);
      <%- node.params.each_with_index do |param, index| -%>
      <%= "yp_buffer_append_str(buffer, \", \", 2);" if index != 0 -%>
      <%- case param -%>
      <%- when NodeParam -%>
      prettyprint_node(buffer, parser, node->as.<%= node.human %>.<%= param.name %>);
      <%- when OptionalNodeParam -%>
      if (node->as.<%= node.human %>.<%= param.name %> == NULL) {
        yp_buffer_append_str(buffer, "nil", 3);
      } else {
        prettyprint_node(buffer, parser, node->as.<%= node.human %>.<%= param.name %>);
      }
      <%- when StringParam -%>
      yp_buffer_append_str(buffer, "\"", 1);
      yp_buffer_append_str(buffer, yp_string_source(&node->as.<%= node.human %>.<%= param.name %>), yp_string_length(&node->as.<%= node.human %>.<%= param.name %>));
      yp_buffer_append_str(buffer, "\"", 1);
      <%- when NodeListParam -%>
      for (uint32_t index = 0; index < node->as.<%= node.human %>.<%= param.name %>.size; index++) {
        if (index != 0) yp_buffer_append_str(buffer, ", ", 2);
        prettyprint_node(buffer, parser, node->as.<%= node.human %>.<%= param.name %>.nodes[index]);
      }
      <%- when TokenParam -%>
      prettyprint_token(buffer, &node->as.<%= node.human %>.<%= param.name %>);
      <%- when OptionalTokenParam -%>
      if (node->as.<%= node.human %>.<%= param.name %>.type == YP_TOKEN_NOT_PROVIDED) {
        yp_buffer_append_str(buffer, "nil", 3);
      } else {
        prettyprint_token(buffer, &node->as.<%= node.human %>.<%= param.name %>);
      }
      <%- when TokenListParam -%>
      for (uint32_t index = 0; index < node->as.<%= node.human %>.<%= param.name %>.size; index++) {
        if (index != 0) yp_buffer_append_str(buffer, ", ", 2);
        prettyprint_token(buffer, &node->as.<%= node.human %>.<%= param.name %>.tokens[index]);
      }
      <%- else -%>
      <%- raise -%>
      <%- end -%>
      <%- end -%>
      yp_buffer_append_str(buffer, ")", 1);
      break;
    }
    <%- end -%>
  }
}

void
yp_print_node(yp_parser_t *parser, yp_node_t *node) {
  yp_buffer_t buffer;
  yp_buffer_init(&buffer);

  prettyprint_node(&buffer, parser, node);
  printf("%.*s\n", (int) buffer.length, buffer.value);

  yp_buffer_free(&buffer);
}

// Pretty-prints the AST represented by the given node to the given buffer.
__attribute__((__visibility__("default"))) extern void
yp_prettyprint(yp_parser_t *parser, yp_node_t *node, yp_buffer_t *buffer) {
  prettyprint_node(buffer, parser, node);
}
