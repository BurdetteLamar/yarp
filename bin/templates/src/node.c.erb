/******************************************************************************/
/* This file is generated by the bin/template script and should not be        */
/* modified manually.                                                         */
/******************************************************************************/

#include "node.h"

// Allocate the space for a new yp_node_t. Currently we're not using the
// parser argument, but it's there to allow for the future possibility of
// pre-allocating larger memory pools and then pulling from those here.
static inline yp_node_t *
yp_node_create(yp_parser_t *parser) {
  return malloc(sizeof(yp_node_t));
}

// Allocate a new yp_token_list_t.
yp_token_list_t *
yp_token_list_create() {
  yp_token_list_t *token_list = malloc(sizeof(yp_token_list_t));
  token_list->tokens = NULL;
  token_list->size = 0;
  token_list->capacity = 0;
  return token_list;
}

// Append a token to the given list.
void
yp_token_list_append(yp_token_list_t *token_list, yp_token_t *token) {
  if (token_list->size == token_list->capacity) {
    token_list->capacity = token_list->capacity == 0 ? 1 : token_list->capacity * 2;
    token_list->tokens = realloc(token_list->tokens, sizeof(yp_token_t) * token_list->capacity);
  }
  token_list->tokens[token_list->size++] = *token;
}

// Checks if the current token list includes the given token.
bool
yp_token_list_includes(yp_token_list_t *token_list, yp_token_t *token) {
  size_t length = token->end - token->start;

  for (size_t index = 0; index < token_list->size; index++) {
    yp_token_t current_token = token_list->tokens[index];

    if (current_token.type == token->type && memcmp(current_token.start, token->start, length) == 0) {
      return true;
    }
  }
  return false;
}

// Free the memory associated with the token list and the token list itself.
void
yp_token_list_destroy(yp_token_list_t *token_list) {
  free(token_list->tokens);
  free(token_list);
}

// Allocate a list of nodes. The parser argument is not used, but is here for
// the future possibility of pre-allocating memory pools.
static yp_node_list_t *
yp_node_list_create(yp_parser_t *parser) {
  yp_node_list_t *list = malloc(sizeof(yp_node_list_t));
  list->nodes = NULL;
  list->size = 0;
  list->capacity = 0;
  return list;
}

// Append a new node onto the end of the node list.
void
yp_node_list_append(yp_parser_t *parser, yp_node_t *parent, yp_node_list_t *list, yp_node_t *node) {
  if (list->size == list->capacity) {
    list->capacity = list->capacity == 0 ? 4 : list->capacity * 2;
    list->nodes = realloc(list->nodes, list->capacity * sizeof(yp_node_t *));
  }
  list->nodes[list->size++] = node;

  if (list->size == 0) parent->location.start = node->location.start;
  parent->location.end = node->location.end;
}

__attribute__((__visibility__("default"))) void
yp_node_destroy(yp_parser_t *parser, yp_node_t *node);

// Deallocate a list of nodes. The parser argument is not used, but is here for
// the future possibility of pre-allocating memory pools.
static void
yp_node_list_destroy(yp_parser_t *parser, yp_node_list_t *list) {
  if (list->capacity > 0) {
    for (size_t index = 0; index < list->size; index++) {
      yp_node_destroy(parser, list->nodes[index]);
    }
    free(list->nodes);
  }
  free(list);
}

<%- nodes.each do |node| -%>
// Allocate a new <%= node.name %> node.
yp_node_t *
<%- params = node.params.map(&:param).compact.join(", ") -%>
yp_node_<%= node.human %>_create(yp_parser_t *parser<%= params.empty? ? "" : ", #{params}" %>) {
  yp_node_t *node = yp_node_create(parser);
  *node = (yp_node_t) {
    .type = <%= node.type %>,
    .location = <%= node.location %>,
    .as.<%= node.human %> = {
      <%- node.params.each do |param| -%>
      .<%= param.name %> = <%= param.assign %>,
      <%- end -%>
    },
  };
  return node;
}

<%- end -%>
// Deallocate the space for a yp_node_t. Similarly to yp_node_alloc, we're not
// using the parser argument, but it's there to allow for the future possibility
// of pre-allocating larger memory pools.
__attribute__((__visibility__("default"))) void
yp_node_destroy(yp_parser_t *parser, yp_node_t *node) {
  switch (node->type) {
    <%- nodes.each do |node| -%>
    case <%= node.type %>:
      <%- node.params.each do |param| -%>
      <%- case param -%>
      <%- when TokenParam -%>
      <%- when NodeParam -%>
      yp_node_destroy(parser, node->as.<%= node.human %>.<%= param.name %>);
      <%- when OptionalNodeParam -%>
      if (node->as.<%= node.human %>.<%= param.name %> != NULL) {
        yp_node_destroy(parser, node->as.<%= node.human %>.<%= param.name %>);
      }
      <%- when StringParam -%>
      yp_string_destroy(&node->as.<%= node.human %>.<%= param.name %>);
      <%- when NodeListParam -%>
      yp_node_list_destroy(parser, node->as.<%= node.human %>.<%= param.name %>);
      <%- when TokenListParam -%>
      yp_token_list_destroy(node->as.<%= node.human %>.<%= param.name %>);
      <%- else -%>
      <%- raise -%>
      <%- end -%>
      <%- end -%>
      free(node);
      break;
    <%- end -%>
  }
}
