#!/usr/bin/env ruby
# frozen_string_literal: true

# Usage:
#   bin/lex <filename>
#   bin/lex -e "<source-code>"

$:.unshift(File.expand_path("../lib", __dir__))
require "ripper"
require "yarp"

if ARGV[0] == "-e"
  source = ARGV[1]
else
  filepath = ARGV.first
  source = File.read(filepath)
end

pattern = "%-70s %-70s"

ripper =
  begin
    YARP.lex_ripper(source)
  rescue SyntaxError
    # If Ripper raises a syntax error, we want to continue as if it didn't
    # return any tokens at all. YARP won't raise a syntax error, so it's nicer
    # to still be able to see the tokens that YARP generated.
    []
  end

yarp = YARP.lex_compat(source, filepath)
if yarp.errors.any?
  puts "Errors lexing:"
  yarp.errors.map do |error|
    puts "\e[1;31m- #{error.message}\e[0m"
  end
  puts "\n"
end

puts pattern % ["Ripper lex", "YARP lex"]
puts pattern % ["-" * 70, "-" * 70]

yarp_value = yarp.value

[yarp_value.length, ripper.length].max.times do |index|
  left = ripper[index]
  right = yarp_value[index]

  color = left == right ? "38;5;102" : "1;31"

  if ENV["VERBOSE"] || (left != right)
    puts "\033[#{color}m#{pattern}\033[0m" % [left.inspect, right.inspect]
  end
end
