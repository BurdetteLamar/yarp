#!/usr/bin/env ruby
# frozen_string_literal: true

def table(range, encoding)
  puts "//  #{(0...16).map { |value| value.to_s(16).upcase }.join("      ")}"

  range.each_slice(16).with_index do |slice, row_index|
    row =
      slice.map do |codepoint|
        character = codepoint.chr(encoding)

        value = 0
        value |= (1 << 0) if character.match?(/[[:alpha:]]/)
        value |= (1 << 1) if character.match?(/[[:alnum:]]/)
        value |= (1 << 2) if character.match?(/[[:upper:]]/)

        "0b%03b," % value
      end

    puts "#{row.join(" ")} // #{row_index.to_s(16).upcase}x"
  end
end

def lists(name, range, encoding)
  range = range.map { begin; _1.chr(Encoding::UTF_8); _1; rescue RangeError; nil; end }.compact

  { alpha: /[[:alpha:]]/, alnum: /[[:alnum:]]/, isupper: /[[:upper:]]/ }.map do |kind, regex|
    codepoints = range.select { _1.chr(Encoding::UTF_8).match?(regex) }

    previous = nil
    groups =
      codepoints.slice_before do |codepoint|
        (!previous.nil? && (codepoint - previous) != 1).tap { previous = codepoint }
      end

    matched =
      groups.flat_map do |group|
        ["0x#{group.first.to_s(16).upcase}", "0x#{group.last.to_s(16).upcase}"]
      end

    puts "\n#define #{name.upcase}_#{kind.upcase}_CODEPOINTS_LENGTH #{matched.length}"
    puts "#{name}_codepoint_t #{name}_#{kind}_codepoints[#{name.upcase}_#{kind.upcase}_CODEPOINTS_LENGTH] = {"
    matched.each_slice(2) { |slice| puts "  #{slice.join(", ")}," }
    puts "};"
  end
end

puts "ASCII"
puts "=========="
table((0...128), Encoding::US_ASCII)

puts "\nISO-8859-9"
puts "=========="
table((0...256), Encoding::ISO8859_9)

puts "\nISO-8859-15"
puts "=========="
table((0...256), Encoding::ISO8859_15)

puts "\nBig5"
puts "=========="
lists("big5", (0...0x10000), Encoding::Big5)

puts "\nUTF-8"
puts "=========="
lists("utf8", (0...0x110000), Encoding::UTF_8)
