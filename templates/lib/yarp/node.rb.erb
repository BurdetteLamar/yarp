module YARP
  <%- nodes.each do |node| -%>
  <%= "#{node.comment.split("\n").map { |line| line.empty? ? "#" : "# #{line}" }.join("\n  ")}\n  " if node.comment %>class <%= node.name -%> < Node
    <%- node.params.each do |param| -%>
    # attr_reader <%= param.name %>: <%= param.rbs_class %>
    attr_reader :<%= param.name %>

    <%- end -%>
    # def initialize: (<%= (node.params.map { |param| "#{param.name}: #{param.rbs_class}" } + ["location: Location"]).join(", ") %>) -> void
    def initialize(<%= (node.params.map(&:name) + ["location"]).join(", ") %>)
      <%- node.params.each do |param| -%>
      @<%= param.name %> = <%= param.name %>
      <%- end -%>
      @location = location
    end

    # def accept: (visitor: Visitor) -> void
    def accept(visitor)
      visitor.visit_<%= node.human %>(self)
    end

    # def child_nodes: () -> Array[nil | Node]
    def child_nodes
      [<%= node.params.filter_map { |param|
        case param
        when SingleNodeParam then param.name
        when NodeListParam then "*#{param.name}"
        end
      }.join(", ") %>]
    end

    # def deconstruct: () -> Array[nil | Node]
    alias deconstruct child_nodes

    # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
    def deconstruct_keys(keys)
      { <%= (node.params.map { |param| "#{param.name}: #{param.name}" } + ["location: location"]).join(", ") %> }
    end
    <%- node.params.each do |param| -%>
    <%- case param -%>
    <%- when LocationParam -%>
    <%- raise unless param.name.end_with?("_loc") -%>
    <%- next if node.params.any? { |other| other.name == param.name.delete_suffix("_loc") } -%>

    # def <%= param.name.delete_suffix("_loc") %>: () -> String
    def <%= param.name.delete_suffix("_loc") %>
      <%= param.name %>.slice
    end
    <%- when OptionalLocationParam -%>
    <%- raise unless param.name.end_with?("_loc") -%>
    <%- next if node.params.any? { |other| other.name == param.name.delete_suffix("_loc") } -%>

    # def <%= param.name.delete_suffix("_loc") %>: () -> String?
    def <%= param.name.delete_suffix("_loc") %>
      <%= param.name %>&.slice
    end
    <%- end -%>
    <%- end -%>
  end

  <%- end -%>
  <%- flags.each do |flag| -%>
  module <%= flag.name %>
    <%- flag.values.each_with_index do |value, index| -%>
    # <%= value.comment %>
    <%= value.name %> = 1 << <%= index %>
<%= "\n" if value != flag.values.last -%>
    <%- end -%>
  end

  <%- end -%>
  # A class that knows how to walk down the tree. None of the individual visit
  # methods are implemented on this visitor, so it forces the consumer to
  # implement each one that they need. For a default implementation that
  # continues walking the tree, see the Visitor class.
  class BasicVisitor
    def visit(node)
      node&.accept(self)
    end

    def visit_all(nodes)
      nodes.map { |node| visit(node) }
    end

    def visit_child_nodes(node)
      visit_all(node.child_nodes)
    end
  end

  class Visitor < BasicVisitor
    <%- nodes.each do |node| -%>
    # Visit a <%= node.name %> node
    alias visit_<%= node.human %> visit_child_nodes
<%= "\n" if node != nodes.last -%>
    <%- end -%>
  end

  module DSL
    private

    # Create a new Location object
    def Location(source = nil, start_offset = 0, length = 0)
      Location.new(source, start_offset, length)
    end
    <%- nodes.each do |node| -%>

    # Create a new <%= node.name %> node
    def <%= node.name %>(<%= (node.params.map(&:name) + ["location = Location()"]).join(", ") %>)
      <%= node.name %>.new(<%= (node.params.map(&:name) + ["location"]).join(", ") %>)
    end
    <%- end -%>
  end
end
